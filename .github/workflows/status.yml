name: 定期ステータス更新
permissions:
  contents: write
  actions: write
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  update-status:
    runs-on: [self-hosted, windows, self-hosted Windows X64]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true  # ← GitHub トークンを credentials に残す
      - name: Set PowerShell Execution Policy
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
      - name: コンピューター検出＆状態チェック＆JSON出力
        shell: powershell
        run: |
          # ローカルインターフェースとサブネット情報を取得
          $interfaces = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notmatch 'Loopback' -and $_.IPAddress -ne '127.0.0.1' }
          
          # コンピューターかどうかを判定する関数
          function Test-IsComputer {
            param([string]$IPAddress)
            
            # Windows共有ポート (445) が開いているかチェック
            try {
              $tcpClient = New-Object System.Net.Sockets.TcpClient
              $connection = $tcpClient.BeginConnect($IPAddress, 445, $null, $null)
              $wait = $connection.AsyncWaitHandle.WaitOne(100)
              if ($wait) {
                $tcpClient.EndConnect($connection)
                $tcpClient.Close()
                return $true
              } else {
                $tcpClient.Close()
                
                # 別のWinRMポート (5985) もチェック
                $tcpClient = New-Object System.Net.Sockets.TcpClient
                $connection = $tcpClient.BeginConnect($IPAddress, 5985, $null, $null)
                $wait = $connection.AsyncWaitHandle.WaitOne(100)
                if ($wait) {
                  $tcpClient.EndConnect($connection)
                  $tcpClient.Close()
                  return $true
                }
                $tcpClient.Close()
                return $false
              }
            } catch {
              return $false
            }
          }
          
          # サブネット範囲を計算する関数
          function Get-NetworkRange {
            param(
              [string]$IPAddress,
              [int]$PrefixLength
            )
            
            try {
              # IP アドレスをバイト配列に変換
              $ipBytes = [System.Net.IPAddress]::Parse($IPAddress).GetAddressBytes()
              [Array]::Reverse($ipBytes)
              $ipInt = [System.BitConverter]::ToUInt32($ipBytes, 0)
              
              # サブネットマスクを計算
              $maskInt = ([UInt32]::MaxValue) -shl (32 - $PrefixLength)
              
              # ネットワークアドレスを計算
              $networkInt = $ipInt -band $maskInt
              
              # ブロードキャストアドレスを計算
              $broadcastInt = $networkInt -bor (-bnot $maskInt)
              
              # ネットワーク内の最初と最後のIPアドレスを取得
              $startIpInt = $networkInt + 1
              $endIpInt = $broadcastInt - 1
              
              # スタート IP をバイト配列に変換
              $startIpBytes = [System.BitConverter]::GetBytes($startIpInt)
              [Array]::Reverse($startIpBytes)
              $startIp = [System.Net.IPAddress]::new($startIpBytes)
              
              # エンド IP をバイト配列に変換
              $endIpBytes = [System.BitConverter]::GetBytes($endIpInt)
              [Array]::Reverse($endIpBytes)
              $endIp = [System.Net.IPAddress]::new($endIpBytes)
              
              return @{
                StartIP = $startIp.IPAddressToString
                EndIP = $endIp.IPAddressToString
              }
            }
            catch {
              Write-Host "IP 範囲計算中にエラー: $_"
              # エラーが発生したら、代替の安全な範囲を返す
              $ipParts = $IPAddress -split '\.'
              return @{
                StartIP = "$($ipParts[0]).$($ipParts[1]).$($ipParts[2]).1"
                EndIP = "$($ipParts[0]).$($ipParts[1]).$($ipParts[2]).254"
              }
            }
          }
          
          $results = @()
          foreach ($interface in $interfaces) {
            $ip = $interface.IPAddress
            $prefixLength = $interface.PrefixLength
            
            Write-Host "インターフェース: $($interface.InterfaceAlias), IP: $ip, サブネット: /$prefixLength"
            
            # ARP テーブルから既知のデバイスを取得
            $arpResults = Get-NetNeighbor -AddressFamily IPv4 | Where-Object { 
              $_.State -eq 'Reachable' -and $_.IPAddress -ne '127.0.0.1' 
            }
            
            Write-Host "ARP エントリー数: $($arpResults.Count)"
            foreach ($device in $arpResults) {
              # まずはPingで応答確認
              try {
                $alive = Test-Connection -Count 1 -Quiet -ComputerName $device.IPAddress -ErrorAction SilentlyContinue
                
                if ($alive) {
                  # コンピューターかどうかをチェック
                  $isComputer = Test-IsComputer -IPAddress $device.IPAddress
                  
                  if ($isComputer) {
                    # ホスト名解決を試みる
                    try {
                      $hostEntry = [System.Net.Dns]::GetHostEntry($device.IPAddress)
                      $hostname = $hostEntry.HostName
                    } catch {
                      $hostname = "PC-$($device.IPAddress)"
                    }
                    
                    $results += [PSCustomObject]@{
                      name = $hostname
                      ip = $device.IPAddress
                      mac = $device.LinkLayerAddress
                      alive = $alive
                      type = "computer"
                    }
                    
                    Write-Host "コンピューター検出: $hostname ($($device.IPAddress))"
                  }
                }
              } catch {
                Write-Host "デバイス $($device.IPAddress) のチェック中にエラー: $_"
                continue
              }
            }
            
            # サブネット範囲を取得
            $range = Get-NetworkRange -IPAddress $ip -PrefixLength $prefixLength
            
            # IP範囲からランダムなIPを選択してスキャン
            $startParts = $range.StartIP -split '\.'
            $endParts = $range.EndIP -split '\.'
            
            # 簡易的な IP リストの生成（サンプリング - 全アドレスではなく一部だけ）
            $ipList = @()
            for ($i = [int]$startParts[3]; $i -le [int]$endParts[3]; $i += 5) {  # 5づつ増加させてサンプリング
              $ipList += "$($startParts[0]).$($startParts[1]).$($startParts[2]).$i"
            }
            
            # サンプル数を制限
            $samplesToCheck = $ipList | Get-Random -Count ([Math]::Min(10, $ipList.Count))
            Write-Host "追加スキャン対象: $($samplesToCheck.Count) サンプル"
            
            foreach ($ip in $samplesToCheck) {
              # 既に検出したIPは飛ばす
              if ($results | Where-Object { $_.ip -eq $ip }) {
                continue
              }
              
              try {
                $alive = Test-Connection -Count 1 -Quiet -ComputerName $ip -TimeoutSeconds 1 -ErrorAction SilentlyContinue
                if ($alive) {
                  $isComputer = Test-IsComputer -IPAddress $ip
                  
                  if ($isComputer) {
                    try {
                      $hostEntry = [System.Net.Dns]::GetHostEntry($ip)
                      $hostname = $hostEntry.HostName
                    } catch {
                      $hostname = "PC-$ip"
                    }
                    
                    # MACアドレスを取得
                    $macAddress = "Unknown"
                    $arpEntry = Get-NetNeighbor -IPAddress $ip -ErrorAction SilentlyContinue
                    if ($arpEntry) {
                      $macAddress = $arpEntry.LinkLayerAddress
                    }
                    
                    $results += [PSCustomObject]@{
                      name = $hostname
                      ip = $ip
                      mac = $macAddress
                      alive = $true
                      type = "computer"
                    }
                    
                    Write-Host "追加コンピューター検出: $hostname ($ip)"
                  }
                }
              } catch {
                Write-Host "サンプル IP $ip のチェック中にエラー: $_"
                continue
              }
            }
          }
          
          # 結果をソートして重複を削除
          $results = $results | Sort-Object -Property ip -Unique
          
          Write-Host "検出されたコンピューター数: $($results.Count)"
          $results | ConvertTo-Json -Depth 2 | Out-File -Encoding utf8 docs/status.json
      - name: コミット＆プッシュ
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/status.json
          if (-not (git diff --cached --quiet)) {
            git commit -m "📡 update status.json"
            # リモート URL をトークン付きに差し替え
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin HEAD:main
          } else {
            Write-Host "No changes to commit."
          }
